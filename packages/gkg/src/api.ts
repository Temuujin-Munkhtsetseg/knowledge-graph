// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { EventsEndpointDef } from "../../../crates/http-server/bindings/api";
import type { TSProjectInfo } from "./project_info";
import type { TSWorkspaceFolderInfo } from "./workspace_folder";

export type ApiContract = { info: InfoEndpointDef, workspace_index: WorkspaceIndexEndpointDef, workspace_list: WorkspaceListEndpointDef, workspace_delete: WorkspaceDeleteEndpointDef, index: WorkspaceIndexEndpointDef, events: EventsEndpointDef, };

export type EmptyRequest = null;

export type HttpMethod = "GET" | "POST" | "DELETE";

export type InfoEndpointDef = { method: HttpMethod, path: "/api/info", path_request: EmptyRequest, body_request: EmptyRequest, query_request: EmptyRequest, responses: InfoResponses, };

export type InfoResponses = { "200": ServerInfoResponse, };

/**
 * Job types that can be processed by the queue system.
 *
 * Each job variant represents a different type of work that can be performed.
 * Jobs are routed to workspace-specific queues for sequential processing.
 */
export type Job = { "type": "IndexWorkspaceFolder", "data": { workspace_folder_path: string, priority: JobPriority, } };

export type JobInfo = { id: string, job: Job, created_at: string, started_at: string | null, completed_at: string | null, status: JobStatus, error: string | null, };

/**
 * Priority levels for job processing.
 *
 * Higher priority jobs can cancel existing lower priority jobs for the same workspace.
 * This ensures user-triggered or high-priority operations take precedence over background tasks.
 */
export type JobPriority = "Low" | "Normal" | "High";

export type JobStatus = "Pending" | "Running" | "Completed" | "Failed" | "Cancelled";

export type ServerInfoResponse = { port: number, };

export type StatusResponse = { status: string, };

export type WorkspaceDeleteBodyRequest = { workspace_folder_path: string, };

export type WorkspaceDeleteEndpointDef = { method: HttpMethod, path: "/api/workspace/delete", path_request: EmptyRequest, body_request: WorkspaceDeleteBodyRequest, query_request: EmptyRequest, responses: WorkspaceDeleteResponses, };

export type WorkspaceDeleteResponses = { workspace_folder_path: string | null, removed: boolean | null, bad_request: StatusResponse | null, not_found: StatusResponse | null, internal_server_error: StatusResponse | null, };

export type WorkspaceIndexBodyRequest = { workspace_folder_path: string, };

export type WorkspaceIndexEndpointDef = { method: HttpMethod, path: "/api/workspace/index", path_request: EmptyRequest, body_request: WorkspaceIndexBodyRequest, query_request: EmptyRequest, responses: WorkspaceIndexResponses, };

export type WorkspaceIndexResponses = { ok: TSWorkspaceFolderInfo | null, bad_request: StatusResponse | null, internal_server_error: StatusResponse | null, };

export type WorkspaceListEndpointDef = { method: HttpMethod, path: "/api/workspace/list", path_request: EmptyRequest, body_request: EmptyRequest, query_request: EmptyRequest, responses: WorkspaceListResponses, };

export type WorkspaceListResponses = { ok: WorkspaceListSuccessResponse | null, internal_server_error: StatusResponse | null, };

export type WorkspaceListSuccessResponse = { workspaces: Array<WorkspaceWithProjects>, };

export type WorkspaceWithProjects = { workspace_info: TSWorkspaceFolderInfo, projects: Array<TSProjectInfo>, };
