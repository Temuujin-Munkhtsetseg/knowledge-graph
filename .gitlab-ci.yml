stages:
  - lint
  - build
  - test
  - deploy
  
variables:
  KUZU_VERSION: "0.10.1"

.rust-job-template:
  tags:
    - saas-linux-large-amd64
  image: registry.gitlab.com/gitlab-org/rust/build-images/rust-kuzu:1.88.0-${KUZU_VERSION}-linux-x86_64
  before_script:
    - rustup set auto-self-update disable

mr-title-check:
  image: ${GITLAB_DEPENDENCY_PROXY}node:lts-alpine
  stage: lint
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  before_script:
    - npm install -g @commitlint/cli @commitlint/config-conventional
  script:
    - ./scripts/check-mr-title.sh

rust-fmt-check:
  stage: lint
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - cargo fmt --check
  extends: .rust-job-template

rust-lint-check:
  stage: lint
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  script:
    - cargo clippy --all-targets --all-features -- -D warnings  
  extends: .rust-job-template

xtask-version-check:
  stage: lint
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - cargo run --package xtask --manifest-path crates/xtask/Cargo.toml -- check-versions
  extends: .rust-job-template

frontend-build:
  stage: build
  image: node:22.17.0
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  before_script:
    - npm ci
  script:
    - npm run build --workspace=@gitlab-org/gkg-frontend
    - npm run build --workspace=@gitlab-org/gkg
  artifacts:
    paths:
      - packages/frontend/dist/
    expire_in: 24 hours

rust-unit-test-report:
  stage: test
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  variables:
    RUST_BACKTRACE: 1
  needs:
    - frontend-build
  script:
    - cargo test export_bindings_ && cargo nextest run --profile ci
  extends: .rust-job-template
  artifacts:
    when: always
    reports:
      junit:
        - target/nextest/ci/junit.xml

cargo-update:
  stage: deploy
  extends: .rust-job-template
  script:
    - cargo update --workspace
    - cp Cargo.lock Cargo.lock.new
  artifacts:
    paths:
      - Cargo.lock.new
    expire_in: 7 days
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.linux-build-template:
  image: rust:1.88.0-bookworm
  stage: deploy
  needs:
    - frontend-build
    - cargo-update
  before_script:
    - rm -f Cargo.lock
    - mv Cargo.lock.new Cargo.lock
  script:
    - apt-get update && apt-get install -y build-essential cmake gcc g++ python3
    - rustup target add ${ARCH}-unknown-linux-gnu
    - cargo build --release --bin gkg --target ${ARCH}-unknown-linux-gnu --locked
    - tar -czvf gkg-linux-${ARCH}.tar.gz -C target/${ARCH}-unknown-linux-gnu/release gkg
  artifacts:
    paths:
      - ./gkg-linux-${ARCH}.tar.gz
    expire_in: 7 days
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

.darwin-build-template:
  image: macos-15-xcode-16
  tags:
    - saas-macos-large-m2pro
  stage: deploy
  needs:
    - frontend-build
    - cargo-update
  before_script:
    - rm -f Cargo.lock
    - mv Cargo.lock.new Cargo.lock
  script:
    - brew install cmake python
    - rustup target add ${ARCH}-apple-darwin
    - cargo build --release --bin gkg --target ${ARCH}-apple-darwin --locked
    - tar -czvf gkg-darwin-${ARCH}.tar.gz -C target/${ARCH}-apple-darwin/release gkg
  artifacts:
    paths:
      - ./gkg-darwin-${ARCH}.tar.gz
    expire_in: 7 days
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

build:linux-aarch64-gnu:
  extends: .linux-build-template
  tags:
    - saas-linux-large-arm64
  variables:
    ARCH: aarch64

build:linux-x86_64-gnu:
  extends: .linux-build-template
  tags:
    - saas-linux-large-amd64
  variables:
    ARCH: x86_64

build:darwin-aarch64:
  extends: .darwin-build-template
  variables:
    ARCH: aarch64

build:darwin-x86_64:
  extends: .darwin-build-template
  variables:
    ARCH: x86_64

build:windows-x86_64:
  tags:
    - saas-windows-medium-amd64
  stage: deploy
  needs:
    - frontend-build
    - cargo-update
  before_script:
    - '.\scripts\windows-prepare.ps1 ${KUZU_VERSION}'
    - Remove-Item -Path Cargo.lock -ErrorAction SilentlyContinue
    - Move-Item -Path Cargo.lock.new -Destination Cargo.lock
  script:
    - cargo build --release --bin gkg --locked
    - Copy-Item -Path C:\install\libkuzu\*.dll -Destination target\release\
    - tar -czvf gkg-windows-x86_64.tar.gz -C target/release gkg.exe *.dll
  artifacts:
    paths:
      - ./gkg-windows-x86_64.tar.gz
    expire_in: 7 days
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  timeout: 2h

publish-release::manual:
  image: registry.gitlab.com/gitlab-org/editor-extensions/build-images/node-codesign:22.14.0
  stage: deploy
  needs:
    - build:linux-aarch64-gnu
    - build:linux-x86_64-gnu
    - build:darwin-aarch64
    - build:darwin-x86_64
    - cargo-update
  before_script:
    # Use the new Cargo.lock from cargo-update step
    - rm -f Cargo.lock
    - mv Cargo.lock.new Cargo.lock
    # Validate that the repository contains a package.json and extract a few values from it.
    - |
      if [[ ! -f package.json ]]; then
        echo "No package.json found! A package.json file is required to publish a package to GitLab's NPM registry."
        echo 'For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#creating-a-project'
        exit 1
      fi
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")
    # Validate that the package name is properly scoped to the project's root namespace.
    # For more information, see https://docs.gitlab.com/user/packages/npm_registry/#naming-convention
    - |
      if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
        echo "Invalid package scope! Packages must be scoped in the root namespace of the project, e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
        echo 'For more information, see https://docs.gitlab.com/user/packages/npm_registry/#naming-convention'
        exit 1
      fi
  script:
    - npm ci
    - PREVIOUS_VERSION=$(node -p "require('./package.json').version")
    # Generate SHA256 checksums for all binaries
    - for file in *.tar.gz; do if [ -f "$file" ]; then sha256sum "$file" > "${file}.sha256"; fi; done
    - npm run semantic-release
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: false
