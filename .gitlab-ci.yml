stages:
  - lint
  - test
  - deploy
  
variables:
  GLAB_VERSION: "1.55.0"

.rust-job-template:
  tags:
    - saas-linux-large-amd64
  image: rust:latest
  needs: []
  before_script:
    - apt update && apt install -y build-essential cmake
    - rustc --version && cargo --version
    - export PATH=$PATH:$CARGO_HOME/bin
  only:
    - main
    - merge_requests
  variables:
    CARGO_HOME: ${CI_PROJECT_DIR}/.cargo
  cache:
    key:
      files:
        - Cargo.toml
        - Cargo.lock
    paths:
      - .cargo/bin
      - .cargo/registry/index
      - .cargo/registry/cache
      - target/
    policy: pull-push

rust-unit-tests:
  stage: test
  script:
    - RUST_BACKTRACE=1 cargo test --workspace -- --nocapture   
  extends: .rust-job-template

rust-unit-test-report:
  stage: test
  before_script:
    - apt update && apt install -y build-essential cmake
    - rustup toolchain install nightly
    - cargo install --root . cargo2junit
  script:
    - cargo +nightly test -- -Z unstable-options --format json --report-time | bin/cargo2junit > report.xml
  extends: .rust-job-template
  artifacts:
    when: always
    reports:
      junit:
        - report.xml

rust-fmt-check:
  stage: test
  script:
    - cargo fmt --check
  extends: .rust-job-template

rust-lint-check:
  stage: test
  script:
    - rustup component add clippy
    - cargo clippy --all-targets --all-features -- -D warnings  
  extends: .rust-job-template

xtask-version-check:
  stage: test
  script:
    - cargo run --package xtask --manifest-path crates/xtask/Cargo.toml -- check-versions
  extends: .rust-job-template
  
lint:mr-title:
  image: ${GITLAB_DEPENDENCY_PROXY}node:lts-alpine
  stage: lint
  needs: []
  before_script:
    - npm install -g @commitlint/cli @commitlint/config-conventional
  script:
    - ./scripts/check-mr-title.sh

publish-release::manual:
  image: registry.gitlab.com/gitlab-org/editor-extensions/build-images/node-codesign:22.14.0
  stage: deploy
  before_script:
    # Validate that the repository contains a package.json and extract a few values from it.
    - |
      if [[ ! -f package.json ]]; then
        echo "No package.json found! A package.json file is required to publish a package to GitLab's NPM registry."
        echo 'For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#creating-a-project'
        exit 1
      fi
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")
    # Validate that the package name is properly scoped to the project's root namespace.
    # For more information, see https://docs.gitlab.com/user/packages/npm_registry/#naming-convention
    - |
      if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
        echo "Invalid package scope! Packages must be scoped in the root namespace of the project, e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
        echo 'For more information, see https://docs.gitlab.com/user/packages/npm_registry/#naming-convention'
        exit 1
      fi
  script:
    - npm ci
    - PREVIOUS_VERSION=$(node -p "require('./package.json').version")
    - npm run semantic-release
    - echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> ./build.env
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: false
