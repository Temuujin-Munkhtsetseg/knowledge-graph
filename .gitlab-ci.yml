stages:
  - test
  - tag
  
variables:
  GLAB_VERSION: "1.55.0"

.rust-job-template:
  image: rust:latest
  needs: []
  before_script:
    - rustc --version && cargo --version
    - export PATH=$PATH:$CARGO_HOME/bin
  only:
    - main
    - merge_requests
  variables:
    CARGO_HOME: ${CI_PROJECT_DIR}/.cargo
  cache:
    key:
      files:
        - Cargo.toml
        - Cargo.lock
    paths:
      - .cargo/bin
      - .cargo/registry/index
      - .cargo/registry/cache
      - target/debug/deps
      - target/debug/build
    policy: pull-push

rust-unit-tests:
  stage: test
  script:
    - cargo test -- --nocapture
  extends: .rust-job-template

rust-unit-test-report:
  stage: test
  before_script:
    - rustup toolchain install nightly
    - cargo install --root . cargo2junit
  script:
    - cargo +nightly test -- -Z unstable-options --format json --report-time | bin/cargo2junit > report.xml
  extends: .rust-job-template
  artifacts:
    when: always
    reports:
      junit:
        - report.xml

rust-fmt-check:
  stage: test
  script:
    - cargo fmt --check
  extends: .rust-job-template

rust-lint-check:
  stage: test
  script:
    - rustup component add clippy
    - cargo clippy --all-targets --all-features -- -D warnings  
  extends: .rust-job-template

xtask-version-check:
  stage: test
  script:
    - cargo run --package xtask --manifest-path crates/xtask/Cargo.toml -- check-versions
  extends: .rust-job-template

version_tag:
  stage: tag
  image: registry.gitlab.com/gitlab-org/cli:v${GLAB_VERSION}
  rules:
    # Run on main branch updates but only if the VERSION file exists
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      exists:
        - VERSION
  script:
    - VERSION=$(cat VERSION)
    - echo "Checking if tag v${VERSION} already exist"
    - glab auth login --hostname $CI_SERVER_HOST --token $TAG_CREATOR_TOKEN
    - |
      # Check if version tag exists
      if glab api /projects/$CI_PROJECT_ID/repository/tags/v${VERSION} --silent; then
        echo "Tag v${VERSION} already exists, skipping creation"
      else
        echo "Tag v${VERSION} doesn't exist, will create it"
        echo "Creating tag v${VERSION}"
        glab api /projects/$CI_PROJECT_ID/repository/tags -X POST -f "tag_name=v${VERSION}" -f "ref=$CI_COMMIT_SHA" -f "message=Release version ${VERSION}"
      fi
