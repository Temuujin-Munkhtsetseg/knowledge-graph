stages:
  - lint
  - build
  - test
  - deploy
  
variables:
  GLAB_VERSION: "1.55.0"

.rust-job-template:
  tags:
    - saas-linux-large-amd64
  image: registry.gitlab.com/gitlab-org/rust/build-images/rust-kuzu:1.88.0-0.10.1-linux-x86_64
  needs: 
    - frontend-build
  before_script:
    - rustup set auto-self-update disable
  only:
    - main
    - merge_requests

mr-title-check:
  image: ${GITLAB_DEPENDENCY_PROXY}node:lts-alpine
  stage: lint
  needs: []
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
  before_script:
    - npm install -g @commitlint/cli @commitlint/config-conventional
  script:
    - ./scripts/check-mr-title.sh

rust-fmt-check:
  stage: lint
  needs: []
  script:
    - cargo fmt --check
  extends: .rust-job-template

frontend-build:
  stage: build
  image: node:22.17.0
  needs: []
  before_script:
    - npm ci
  script:
    - npm run build --workspace=@gitlab-org/gkg-frontend
    - npm run build --workspace=@gitlab-org/gkg
  artifacts:
    paths:
      - packages/frontend/dist/
    expire_in: 1 hour
  only:
    - main
    - merge_requests
    - tags

rust-lint-check:
  stage: build
  needs:
    - frontend-build
  script:
    - cargo clippy --all-targets --all-features -- -D warnings  
  extends: .rust-job-template

rust-unit-test-report:
  stage: test
  variables:
    RUST_BACKTRACE: 1
  needs:
    - frontend-build
  script:
    - cargo test export_bindings_ && cargo nextest run --profile ci
  extends: .rust-job-template
  artifacts:
    when: always
    reports:
      junit:
        - target/nextest/ci/junit.xml

rust-check-packages:
  stage: test
  script:
    - cargo check --workspace --all-features --all-targets
  extends: .rust-job-template

xtask-version-check:
  stage: test
  script:
    - cargo run --package xtask --manifest-path crates/xtask/Cargo.toml -- check-versions
  extends: .rust-job-template

publish-release::manual:
  image: registry.gitlab.com/gitlab-org/editor-extensions/build-images/node-codesign:22.14.0
  stage: deploy
  variables:
    # Prevent rustup from auto-updating to avoid cross-device link issues in Docker
    RUSTUP_UPDATE_ROOT: "false"
    RUSTUP_DISABLE_AUTOUPDATE: "1"
  before_script:
    # Validate that the repository contains a package.json and extract a few values from it.
    - |
      if [[ ! -f package.json ]]; then
        echo "No package.json found! A package.json file is required to publish a package to GitLab's NPM registry."
        echo 'For more information, see https://docs.gitlab.com/ee/user/packages/npm_registry/#creating-a-project'
        exit 1
      fi
    - NPM_PACKAGE_NAME=$(node -p "require('./package.json').name")
    - NPM_PACKAGE_VERSION=$(node -p "require('./package.json').version")
    # Validate that the package name is properly scoped to the project's root namespace.
    # For more information, see https://docs.gitlab.com/user/packages/npm_registry/#naming-convention
    - |
      if [[ ! $NPM_PACKAGE_NAME =~ ^@$CI_PROJECT_ROOT_NAMESPACE/ ]]; then
        echo "Invalid package scope! Packages must be scoped in the root namespace of the project, e.g. \"@${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}\""
        echo 'For more information, see https://docs.gitlab.com/user/packages/npm_registry/#naming-convention'
        exit 1
      fi
  script:
    - npm ci
    - PREVIOUS_VERSION=$(node -p "require('./package.json').version")
    - npm run semantic-release
    - echo "PACKAGE_VERSION=$(node -p "require('./package.json').version")" >> ./build.env
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  allow_failure: false
