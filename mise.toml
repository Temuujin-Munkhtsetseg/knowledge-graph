[tools]
node = "22"
rust = "stable"

# compiles cli and static library for release
[tasks.build]
run = "./scripts/build.sh"

# compiles the cli in release mode and installs it to ~/.cargo/bin
# this is used to run the production cli from the command line
[tasks.build-cli-release]
run = "cargo build --release -p gkg && cargo install --path crates/gkg"

# compiles static knowledge graph library
[tasks.build-lib]
run = "CARGO_PARAMS='--release' ./scripts/build.sh lib"

# runs the http server in debug mode
# serves at http://localhost:27495
# useful for pairing with the frontend
[tasks.server-dev]
run = "cargo run --bin dev-server"

# Same thing as server-dev, but with reindexing enabled
[tasks.server-dev-reindexing]
run = "cargo run --bin dev-server -- --enable-reindexing"

# runs the http server in debug mode with auto-reload on file changes
# serves at http://localhost:27495
# only watches crates/* for changes
# useful for pairing with the frontend
[tasks.server-watch]
run = "cargo watch -w crates -x 'run --bin dev-server'"

# Same thing as server-watch, but with reindexing enabled
[tasks.server-watch-reindexing]
run = "cargo watch -w crates -x 'run --bin dev-server -- --enable-reindexing'"

# generates the typescript bindings from rust to
# packages/gkg/src/**/*
[tasks.bindings-gen]
run = "cargo test export_bindings_"

# runs the tests with regular cargo test
[tasks.cargo-test]
run = "cargo test"

# runs the tests with nextest
[tasks.nextest]
run = "cargo nextest run"

# runs go bindings tests
[tasks.gotest]
run = "cd bindings/go/ && go test ./..."

# removes generated artifacts and libs
[tasks.clean]
run = [
    "cargo clean",
    "rm -rf lib/*/",
]

# formats code and applies clippy fixes
[tasks.fix-all]
run = "cargo fmt && cargo clippy --fix --allow-dirty"

# compiles via tsc and builds the frontend in production mode (vite build)
[tasks.frontend-build]
run = "npm run build --workspace=@gitlab-org/gkg-frontend"

# runs the frontend in development mode (vite dev
[tasks.frontend-dev]
run = "npm run dev --workspace=@gitlab-org/gkg-frontend"

# runs prettier to format the frontend code
[tasks.frontend-format]
run = "npm run format --workspace=@gitlab-org/gkg-frontend"

# runs and fixes possible eslint errors
[tasks.frontend-lint]
run = "npm run lint --workspace=@gitlab-org/gkg-frontend"

# runs docs development server
[tasks.docs-dev]
run = "npm run dev --workspace=docs"

# runs gitlab-xtasks to check for newlines
[tasks.newlines-fix]
run = "gitlab-xtasks lint verify-newlines --file-extensions rs,md,yml,yaml,toml,astro,js,ts,json,mdx,vue,rb,css,mjs --directory . --fix"
